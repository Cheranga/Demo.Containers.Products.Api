name: "Demo.Containers"
concurrency: "Demo.Containers"
env: 
  APP_NAME: cherademoproductsapi
  RG_NAME: rg-chera-demo
  RG_LOCATION: australiasoutheast
  DOTNET_VERSION: 6.0.x
  PUBLISHED_PATH: ./published
#  BUILD_NUMBER: "$(date +'%Y-%m-%d')"
  

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    
jobs: 
  build:
    name: Build and Test
    runs-on: windows-latest    
    steps:
      - name: Build Test Publish
        uses: Cheranga/GitHubActions/buildtestpublish@master
        with:
          dotnetVersion: 6.0.x
          projectName: Demo.Containers.Products.Api
          artifactName: api
          
      - name: Publish Artifact - Templates
        uses: actions/upload-artifact@v3
        with:
          name: deploy
          path: ./.github/templates
          if-no-files-found: error
          
  DEV:
    name: DEV
    needs: build
    runs-on: ubuntu-latest
    env:
      RG_NAME: rg-chera-demo-dev
    
    environment: 
      name: DEV
      # url: ${{ steps.deploywebapp.outputs.webapp-url }}      
      
    steps:      
      - name: Create Resource Group ${{ env.RG_NAME }}
        uses: Cheranga/GitHubActions/createresourcegroup@master
        with:
          credentials: ${{ secrets.AZURE_CREDENTIALS }}
          name: ${{ env.RG_NAME }}
          location: ${{ env.RG_LOCATION }}

      - name: Download API
        uses: actions/download-artifact@v3
        with:
          name: api
          path: api
          
      - name: Download Templates
        uses: actions/download-artifact@v3
        with:
          name: deploy
          path: deploy

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
            
      - name: Provision Resources 
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ProductsAPI
          resourceGroupName: ${{ env.RG_NAME }}
          template: deploy/main.bicep
          parameters: >            
            envName=dev
            apiEnvironment=Development
            apiName=${{ env.APP_NAME }}
            location=${{ env.RG_LOCATION }}
            databaseConnectionString="${{ secrets.DATABASECONNECTIONSTRING }}"

      - name: Stage and Deploy
        uses: Cheranga/GitHubActions/deploywebapp@master
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resourceGroupName: ${{ env.RG_NAME }}
          webAppArtifactName: api
          webAppName: api-${{ env.APP_NAME }}-dev
          location: ${{ env.RG_LOCATION }}            
            
      # - name: Start Staging Slot
      #   run: |
      #     az resource invoke-action --action start --ids  /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RG_NAME }}/providers/Microsoft.Web/sites/api-${{ env.APP_NAME }}-dev/slots/staging            
      
      # - name: Deploy web app
      #   id: deploywebapp
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: api-${{ env.APP_NAME }}-dev
      #     slot-name: staging
      #     package: api 
          
      # - name: Swap staging slot into production
      #   id: slot_swap
      #   run: |
      #     az webapp deployment slot swap -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev -s staging
      #     url=$(az webapp show -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev --query "defaultHostName" -o tsv)
      #     echo "::set-output name=url::https://$url"
          
      # - name: Update config
      #   uses: Azure/appservice-settings@v1
      #   with:
      #     app-name: api-${{ env.APP_NAME }}-dev
      #     app-settings-json: |
      #       [
      #           {
      #               "name": "DatabaseConfig:ConnectionString",
      #               "value": "${{ secrets.DATABASECONNECTIONSTRING }}",
      #               "slotSetting": true
      #           }
      #       ]          
      
      # - name: Stop Staging Slot
      #   run: |
      #     az resource invoke-action --action stop --ids  /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RG_NAME }}/providers/Microsoft.Web/sites/api-${{ env.APP_NAME }}-dev/slots/staging

      # - name: az cli logout
      #   run: az logout    
          
  # deploy_prod:
  #   name: Swap to Production
  #   needs: deploy-staging
  #   runs-on: ubuntu-latest

  #   environment:
  #     name: PROD
  #     url: ${{ steps.slot_swap.outputs.url }}

  #   steps:
  #     - name: Login via Azure CLI
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Swap staging slot into production
  #       id: slot_swap
  #       run: |
  #         az webapp deployment slot swap -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev -s staging
  #         url=$(az webapp show -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev --query "defaultHostName" -o tsv)
  #         echo "::set-output name=url::https://$url"
          
  #     # - name: Update config
  #     #   uses: Azure/appservice-settings@v1
  #     #   with:
  #     #     app-name: api-${{ env.APP_NAME }}-dev
  #     #     app-settings-json: |
  #     #       [
  #     #           {
  #     #               "name": "DatabaseConfig:ConnectionString",
  #     #               "value": "${{ secrets.DATABASECONNECTIONSTRING }}",
  #     #               "slotSetting": true
  #     #           }
  #     #       ]          
      
  #     - name: Stop Staging Slot
  #       run: |
  #         az resource invoke-action --action stop --ids  /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RG_NAME }}/providers/Microsoft.Web/sites/api-${{ env.APP_NAME }}-dev/slots/staging

  #     - name: az cli logout
  #       run: az logout          
            