name: "Demo.Containers"
concurrency: "Demo.Containers"
env: 
  APP_NAME: cherademoproductsapi
  RG_NAME: rg-chera-demo
  RG_LOCATION: australiasoutheast
  DOTNET_VERSION: 6.0.x
  PUBLISHED_PATH: ./published
#  BUILD_NUMBER: "$(date +'%Y-%m-%d')"
  

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    
jobs: 
  build:
    name: Build and Test
    runs-on: windows-latest    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Install .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore projects
        run: dotnet restore
      
      - name: Build Projects
        run: dotnet build --no-restore -c Release
      
      - name: Publish
        run: dotnet publish -c Release --no-build Demo.Containers.Products.Api/Demo.Containers.Products.Api.csproj -o api
        
      - name: Publish Artifact - API
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: api/**
          if-no-files-found: error
          
      - name: Publish Artifact - Templates
        uses: actions/upload-artifact@v3
        with:
          name: deploy
          path: ./.github/templates
          if-no-files-found: error
          
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    env:
      RG_NAME: rg-chera-demo-dev
    
    environment: 
      name: PRE-PROD      
      url: ${{ steps.deploywebapp.outputs.webapp-url }}      
      
    steps:      
      - name: Create Resource Group ${{ env.RG_NAME }}
        uses: Cheranga/GitHubActions/createresourcegroup/action.yml
        with:
          credentials: ${{ secrets.AZURE_CREDENTIALS }}
          name: ${{ env.RG_NAME }}
          location: ${{ env.RG_LOCATION }}

      - name: Download API
        uses: actions/download-artifact@v3
        with:
          name: api
          path: api
          
      - name: Download Templates
        uses: actions/download-artifact@v3
        with:
          name: deploy
          path: deploy
            
      - name: Provision Resources 
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ProductsAPI
          resourceGroupName: ${{ env.RG_NAME }}
          template: deploy/main.bicep
          parameters: >            
            envName=dev
            apiEnvironment=Development
            apiName=${{ env.APP_NAME }}
            location=${{ env.RG_LOCATION }}
            databaseConnectionString="${{ secrets.DATABASECONNECTIONSTRING }}"
            
      - name: Start Staging Slot
        run: |
          az resource invoke-action --action start --ids  /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RG_NAME }}/providers/Microsoft.Web/sites/api-${{ env.APP_NAME }}-dev/slots/staging            
      
      - name: Deploy web app
        id: deploywebapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: api-${{ env.APP_NAME }}-dev
          slot-name: staging
          package: api 
          
      # - name: Update config
      #   uses: Azure/appservice-settings@v1
      #   with:
      #     app-name: api-${{ env.APP_NAME }}-dev
      #     slot-name: staging
      #     app-settings-json: |
      #       [
      #           {
      #               "name": "DatabaseConfig:ConnectionString",
      #               "value": "${{ secrets.DATABASECONNECTIONSTRING }}",
      #               "slotSetting": true
      #           }
      #       ]
      
      - name: az cli logout
        run: az logout  
          
  deploy_prod:
    name: Swap to Production
    needs: deploy-staging
    runs-on: ubuntu-latest

    environment:
      name: PROD
      url: ${{ steps.slot_swap.outputs.url }}

    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap staging slot into production
        id: slot_swap
        run: |
          az webapp deployment slot swap -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev -s staging
          url=$(az webapp show -g ${{ env.RG_NAME }} -n api-${{ env.APP_NAME }}-dev --query "defaultHostName" -o tsv)
          echo "::set-output name=url::https://$url"
          
      # - name: Update config
      #   uses: Azure/appservice-settings@v1
      #   with:
      #     app-name: api-${{ env.APP_NAME }}-dev
      #     app-settings-json: |
      #       [
      #           {
      #               "name": "DatabaseConfig:ConnectionString",
      #               "value": "${{ secrets.DATABASECONNECTIONSTRING }}",
      #               "slotSetting": true
      #           }
      #       ]          
      
      - name: Stop Staging Slot
        run: |
          az resource invoke-action --action stop --ids  /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RG_NAME }}/providers/Microsoft.Web/sites/api-${{ env.APP_NAME }}-dev/slots/staging

      - name: az cli logout
        run: az logout          
            